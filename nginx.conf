# Discord OAuth Proxy Auth - Nginx Configuration Example
#
# This configuration protects your application at port 3003 with Discord OAuth authentication
# The Discord OAuth service runs on port 3004
#
# Instructions:
# 1. Copy this file to your nginx sites-available directory
# 2. Update the server_name to match your domain
# 3. Update the SSL certificate paths if using HTTPS
# 4. Create a symlink to sites-enabled: ln -s /etc/nginx/sites-available/your-site /etc/nginx/sites-enabled/
# 5. Test configuration: nginx -t
# 6. Reload nginx: systemctl reload nginx

server {
    # Update this to your domain name
    server_name yourdomain.com;

    # HTTP configuration (redirect to HTTPS in production)
    listen 80;

    # Uncomment for HTTPS (recommended for production)
    # listen 443 ssl http2;
    # ssl_certificate /path/to/your/certificate.crt;
    # ssl_certificate_key /path/to/your/private.key;

    # Security headers
    add_header X-Frame-Options "SAMEORIGIN";
    add_header X-Content-Type-Options "nosniff";
    add_header X-XSS-Protection "1; mode=block";
    add_header Referrer-Policy "strict-origin-when-cross-origin";

    # Main application with Discord OAuth authentication
    location / {
        auth_request /auth;
        error_page 401 = @login_redirect;

        # Your protected application (update port if needed)
        proxy_pass http://127.0.0.1:3003;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }

    # Auth endpoint for nginx auth_request module
    location = /auth {
        internal;
        proxy_pass http://127.0.0.1:3004/auth;
        proxy_pass_request_body off;
        proxy_set_header Content-Length "";
        proxy_set_header X-Original-URI $request_uri;
        proxy_set_header Cookie $http_cookie;
    }

    # Login page
    location /login {
        proxy_pass http://127.0.0.1:3004/login;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }

    # OAuth callback
    location /callback {
        proxy_pass http://127.0.0.1:3004/callback;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }

    # Logout endpoint
    location /logout {
        proxy_pass http://127.0.0.1:3004/logout;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }

    # Discord OAuth route - bypasses authentication
    location /auth/discord {
        proxy_pass http://127.0.0.1:3004/auth/discord;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }

    # Logo endpoint (optional)
    location /logo.jpg {
        proxy_pass http://127.0.0.1:3004/logo.jpg;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }

    # Health check endpoint (optional)
    location /health {
        proxy_pass http://127.0.0.1:3004/health;
        proxy_set_header Host $host;
    }

    # Login redirect handler
    location @login_redirect {
        return 302 /login?rd=$request_uri;
    }
}
